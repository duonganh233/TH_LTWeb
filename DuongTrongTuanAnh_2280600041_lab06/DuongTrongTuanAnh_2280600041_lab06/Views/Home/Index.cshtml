@{
    ViewData["Title"] = "Product Management";
}

<style>
    .product-name {
        cursor: pointer;
        color: #0d6efd;
        text-decoration: none;
    }
    .product-name:hover {
        text-decoration: underline;
    }
</style>

<div class="container">
    <div class="row">
        <!-- Alert Box -->
        <div class="col-12">
            <div id="alertBox" class="alert d-none"></div>
        </div>

        <!-- Product Form -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Add/Edit Product</h5>
                </div>
                <div class="card-body">
                    <form id="productForm">
                        <input type="hidden" id="productId">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="price" class="form-label">Price</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="price" step="0.01" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="quantity" class="form-label">Quantity</label>
                            <input type="number" class="form-control" id="quantity" required>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" rows="3" required></textarea>
                        </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-save"></i> Save Product
                            </button>
                            <button type="button" onclick="resetForm()" class="btn btn-secondary">
                                <i class="bi bi-x-circle"></i> Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Product List -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Product List</h5>
                    <span class="badge bg-light text-primary" id="productCount">0 Products</span>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Description</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="productTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Product Detail Modal -->
<div class="modal fade" id="productModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-4 text-muted">ID:</div>
                    <div class="col-8" id="detailId"></div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-4 text-muted">Name:</div>
                    <div class="col-8" id="detailName"></div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-4 text-muted">Price:</div>
                    <div class="col-8" id="detailPrice"></div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-4 text-muted">Quantity:</div>
                    <div class="col-8" id="detailQuantity"></div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-4 text-muted">Description:</div>
                    <div class="col-8" id="detailDescription"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const API_URL = '/api/products';
        let isEditing = false;
        const modal = new bootstrap.Modal(document.getElementById('productModal'));
        const alertBox = document.getElementById('alertBox');

        function showAlert(message, isSuccess = true) {
            alertBox.textContent = message;
            alertBox.className = `alert alert-${isSuccess ? 'success' : 'danger'} d-block`;
            setTimeout(() => {
                alertBox.className = 'alert d-none';
            }, 3000);
        }

        function updateProductCount(count) {
            document.getElementById('productCount').textContent = `${count} Product${count !== 1 ? 's' : ''}`;
        }

        function viewProductDetails(id) {
            fetch(`${API_URL}/${id}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch product details');
                    }
                    return response.json();
                })
                .then(product => {
                    document.getElementById('detailId').textContent = product.id;
                    document.getElementById('detailName').textContent = product.name;
                    document.getElementById('detailPrice').textContent = `$${product.price.toFixed(2)}`;
                    document.getElementById('detailQuantity').textContent = product.quantity;
                    document.getElementById('detailDescription').textContent = product.description;
                    modal.show();
                })
                .catch(error => {
                    console.error('Error fetching product details:', error);
                    showAlert('Failed to load product details', false);
                });
        }

        function fetchProducts() {
            fetch(API_URL)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch products');
                    }
                    return response.json();
                })
                .then(products => {
                    const tableBody = document.getElementById('productTableBody');
                    tableBody.innerHTML = '';
                    updateProductCount(products.length);
                    
                    products.forEach(product => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>
                                <span class="product-name" onclick="viewProductDetails(${product.id})">
                                    ${product.name}
                                </span>
                            </td>
                            <td>$${product.price.toFixed(2)}</td>
                            <td>${product.quantity}</td>
                            <td>${product.description ? product.description.substring(0, 50) + (product.description.length > 50 ? '...' : '') : ''}</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" onclick="editProduct(${product.id})">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteProduct(${product.id})">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        `;
                        tableBody.appendChild(row);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                    showAlert('Failed to load products', false);
                });
        }

        document.getElementById('productForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const productId = document.getElementById('productId').value;
            const productData = {
                id: productId ? parseInt(productId) : 0,
                name: document.getElementById('name').value,
                price: parseFloat(document.getElementById('price').value),
                quantity: parseInt(document.getElementById('quantity').value),
                description: document.getElementById('description').value
            };

            const method = productId ? 'PUT' : 'POST';
            const url = productId ? `${API_URL}/${productId}` : API_URL;

            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(productData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(method === 'PUT' ? 'Failed to update product' : 'Failed to create product');
                }
                if (method === 'POST') {
                    return response.json();
                }
                return null; // For PUT requests, we don't expect JSON
            })
            .then(() => {
                showAlert(productId ? 'Product updated successfully' : 'Product created successfully');
                resetForm();
                fetchProducts();
            })
            .catch(error => {
                console.error('Error saving product:', error);
                showAlert(error.message, false);
            });
        });

        function editProduct(id) {
            fetch(`${API_URL}/${id}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch product for editing');
                    }
                    return response.json();
                })
                .then(product => {
                    document.getElementById('productId').value = product.id;
                    document.getElementById('name').value = product.name;
                    document.getElementById('price').value = product.price;
                    document.getElementById('quantity').value = product.quantity;
                    document.getElementById('description').value = product.description || '';
                    document.querySelector('.card-title').textContent = 'Edit Product';
                })
                .catch(error => {
                    console.error('Error fetching product:', error);
                    showAlert('Failed to load product for editing', false);
                });
        }

        function deleteProduct(id) {
            if (confirm('Are you sure you want to delete this product?')) {
                fetch(`${API_URL}/${id}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete product');
                    }
                    showAlert('Product deleted successfully');
                    fetchProducts();
                })
                .catch(error => {
                    console.error('Error deleting product:', error);
                    showAlert('Failed to delete product', false);
                });
            }
        }

        function resetForm() {
            document.getElementById('productForm').reset();
            document.getElementById('productId').value = '';
            document.querySelector('.card-title').textContent = 'Add Product';
        }

        // Initial load
        fetchProducts();
    </script>
}
